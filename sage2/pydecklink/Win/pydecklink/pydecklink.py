# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pydecklink')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pydecklink')
    _pydecklink = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pydecklink', [dirname(__file__)])
        except ImportError:
            import _pydecklink
            return _pydecklink
        try:
            _mod = imp.load_module('_pydecklink', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pydecklink = swig_import_helper()
    del swig_import_helper
else:
    import _pydecklink
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x



def cdata(ptr, nelements=1):
    return _pydecklink.cdata(ptr, nelements)
cdata = _pydecklink.cdata

def memmove(data, indata):
    return _pydecklink.memmove(data, indata)
memmove = _pydecklink.memmove
class Callback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Callback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Callback, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pydecklink.delete_Callback
    __del__ = lambda self: None

    def run(self, msg, length):
        return _pydecklink.Callback_run(self, msg, length)

    def __init__(self):
        if self.__class__ == Callback:
            _self = None
        else:
            _self = self
        this = _pydecklink.new_Callback(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _pydecklink.disown_Callback(self)
        return weakref_proxy(self)
Callback_swigregister = _pydecklink.Callback_swigregister
Callback_swigregister(Callback)

class DeckLinkManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeckLinkManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeckLinkManager, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pydecklink.new_DeckLinkManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pydecklink.delete_DeckLinkManager
    __del__ = lambda self: None

    def delCallback(self):
        return _pydecklink.DeckLinkManager_delCallback(self)

    def setCallback(self, cb):
        return _pydecklink.DeckLinkManager_setCallback(self, cb)

    def AddDevice(self, deckLink):
        return _pydecklink.DeckLinkManager_AddDevice(self, deckLink)

    def StartCapture(self):
        return _pydecklink.DeckLinkManager_StartCapture(self)

    def StopCapture(self):
        return _pydecklink.DeckLinkManager_StopCapture(self)

    def FrameArrived(self, videoFrame, audioFrame):
        return _pydecklink.DeckLinkManager_FrameArrived(self, videoFrame, audioFrame)
DeckLinkManager_swigregister = _pydecklink.DeckLinkManager_swigregister
DeckLinkManager_swigregister(DeckLinkManager)

# This file is compatible with both classic and new-style classes.


